<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get map data
map_zoom_level = 0;
map_scale_lon[0] = 954.857584; //gps_x -&gt; pixel_x
map_scale[0] = 10;
map_scale[1] = 96;
map_scale_lat[0] = -1107.436512; //gps_y -&gt; pixel_y
map_scale_lon[1] = 9090; //gps_x -&gt; pixel_x
map_scale_lat[1] = -10715; //gps_y -&gt; pixel_y
map_center_lat = 31.95429;
map_center_lon = 118.827318;
map_center_lat_offset=0;
map_center_lon_offset=0;
r = 6371;

//Google_Map = get_map( string(map_center_lat)+","+string(map_center_lon) , map_zoom , 640 , 640 , "roadmap" );
//get gps data from csv file
read_csv("sample.csv");

//map controls
map_offset_x=room_width*0.5;
map_offset_y=room_height*0.5;
mouse_map_offset_x=0;
mouse_map_offset_y=0;
mouse_press_x = 0;
mouse_press_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//map controls
if mouse_check_button_pressed(mb_left){
    mouse_press_x = mouse_x;
    mouse_press_y = mouse_y;
    mouse_map_offset_x = map_offset_x;
    mouse_map_offset_y = map_offset_y;
}
if mouse_check_button(mb_left){
    map_offset_x = mouse_map_offset_x + (mouse_x - mouse_press_x);
    map_offset_y = mouse_map_offset_y + (mouse_y - mouse_press_y);
}
if mouse_wheel_up(){
    if map_zoom_level=0{
        map_zoom_level=1;
        map_offset_x -= (room_width*0.5 - map_offset_x) * map_scale_lat[1]/map_scale_lat[0];
        map_offset_y -= (room_height*0.5 - map_offset_y) * map_scale_lon[1]/map_scale_lon[0];
    }
}
if mouse_wheel_down(){
    if map_zoom_level=1{
        map_zoom_level=0;
        map_offset_x += room_width*0.5 - (room_width*0.5 - map_offset_x) * map_scale_lat[0]/map_scale_lat[1] - map_offset_x;
        map_offset_y += room_height*0.5 -  (room_height*0.5 - map_offset_y) * map_scale_lon[0]/map_scale_lon[1] - map_offset_y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw the map image
//if ( sprite_exists(Google_Map) ){ draw_sprite( Google_Map , 0 , 0 , 0 ) }
if map_zoom_level=0{
    draw_sprite(sprite0,0,map_offset_x,map_offset_y);
}
if map_zoom_level=1{
    draw_sprite(sprite1,0,map_offset_x,map_offset_y);
}
//draw the gps data
//
for(var i=0;i&lt;ds_list_size(lat_list);i++){
//for(var i=0;i&lt;5;i++){
    //get the data for this point from the lists
    //var temp_y = map_offset_y + (ds_list_find_value(lat_list,i) - map_center_lat) * map_scale_lat[map_zoom_level];
    //var temp_x = map_offset_x + (ds_list_find_value(lon_list,i) - map_center_lon) * map_scale_lon[map_zoom_level];
    map_x = (r * cos(degtorad(map_center_lat+map_center_lat_offset)) * cos(degtorad(map_center_lon+map_center_lon_offset)));
    map_y = (r * cos(degtorad(map_center_lat+map_center_lat_offset)) * sin(degtorad(map_center_lon+map_center_lon_offset)));
    //var temp_km = (r * cos(degtorad(ds_list_find_value(lat_list,i))) * cos(degtorad(ds_list_find_value(lon_list,i))) - map_x);
    //var temp_x = ((r * cos(degtorad(ds_list_find_value(lat_list,i)-map_center_lat)) * cos(degtorad(ds_list_find_value(lon_list,i)-map_center_lon))) );
    //var temp_y = ((r * cos(degtorad(ds_list_find_value(lat_list,i)-map_center_lat)) * sin(degtorad(ds_list_find_value(lon_list,i)-map_center_lon))));
    //while(temp_x&gt;=r*0.5){temp_x-=r;}
    //while(temp_x&lt;=-r*0.5){temp_x+=r;}
    //while(temp_y&gt;=r*0.5){temp_y-=r;}
    //while(temp_y&lt;=-r*0.5){temp_y+=r;}
    //temp_x = map_offset_x + (temp_x * map_scale[map_zoom_level]);
    //temp_y = map_offset_y + (temp_y * map_scale[map_zoom_level]);
    var temp_y = r * (ds_list_find_value(lat_list,i) - map_center_lat) * pi/180;
    var temp_x = r * (ds_list_find_value(lon_list,i) - map_center_lon) * pi/180 * cos(map_center_lat);
    temp_x = map_offset_x + (temp_x * map_scale[map_zoom_level]);
    temp_y = map_offset_y - (temp_y * map_scale[map_zoom_level]);
    var temp_speed = ds_list_find_value(speed_list,i);
    var temp_direction = ds_list_find_value(direction_list,i);
    var temp_time = ds_list_find_value(time_list,i);
    var temp_passenger = ds_list_find_value(passenger_list,i);
    
    //draw the 
    var a = 0.1;
    // draw if car has passengers or not
    if(temp_passenger == 0){
        draw_set_color(c_black);
    }else {
        draw_set_color(c_yellow);
    }
    draw_circle(temp_x,temp_y,3,0);
    draw_line_width(temp_x,temp_y,temp_x + temp_speed * a * cos(degtorad(temp_direction)),temp_y - temp_speed * a * sin(degtorad(temp_direction)),2);
    //draw_text(temp_x+10,temp_y-10,string(ds_list_find_value(lat_list,i))+","+string(ds_list_find_value(lon_list,i)));
}

//
draw_text(10,10,"lat_scale= "+string(map_scale_lat));
draw_text(10,30,"lon_scale= "+string(map_scale_lon));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_center_lon_offset+=0.001
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_center_lon_offset-=0.001
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_center_lat_offset+=0.001
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_center_lat_offset-=0.001
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_scale[1]-=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_scale[1]+=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_scale[1]+=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_scale[1]-=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
