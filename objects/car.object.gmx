<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>data_id=0;//id from the excel data

time_count=0;
for(var i=0;i&lt;100;i++){
    data[i,0]=0;//time
    data[i,1]=0;//lat
    data[i,2]=0;//lon
    data[i,3]=0;//pass
    data[i,4]=0;//speed
    data[i,5]=0;//direction
}

dont_draw_car=0;
someone_else_is_selected=0;
last_dis_time=-1;
use_data_point=0;

selected=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if last_dis_time!=control.dis_time{
    last_dis_time = control.dis_time;
    //find the most up to date data it has relative to the control time
    var max_t =0;
    for(var i=0;i&lt;=time_count;i++){
        if data[i,0]&lt;=control.dis_time &amp;&amp; data[i,0]&gt;max_t{
            use_data_point=i;
            max_t = data[i,0];
        }
    }
    if abs(data[use_data_point,0]-control.dis_time)&gt;1{
        dont_draw_car=1;
    }else{
        dont_draw_car=0;
    }
}
if control.sel_car_instance&gt;0 &amp;&amp; control.sel_car_instance!=id{
    someone_else_is_selected=1;
}else{
    someone_else_is_selected=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if time_count&gt;0 &amp;&amp; !someone_else_is_selected{
    if !dont_draw_car or selected{
    //draw the car 
    var temp_lat = data[use_data_point,1];
    var temp_lon = data[use_data_point,2];
    var temp_y = lat_to_y(temp_lat);
    var temp_x = lon_to_x(temp_lon);
    
    var temp_speed = data[use_data_point,4];
    var temp_direction = data[use_data_point,5];
    var temp_time = data[use_data_point,0];
    var temp_passenger = data[use_data_point,3];
    
    // draw if car has passengers or not
    if selected{
        draw_set_color(c_lime);
        draw_circle(temp_x,temp_y,10,0);
    }
    if(temp_passenger == 0){
        draw_set_color(c_black);
    }else {
        draw_set_color(c_blue);
    }
    draw_circle(temp_x,temp_y,3,0);
    
    //draw_line_width(temp_x,temp_y,temp_x + temp_speed * a * cos(degtorad(temp_direction)),temp_y - temp_speed * a  * sin(degtorad(temp_direction)),2);
    }
}

if selected{
    //draw the cars detailed data
    var dx = room_width-10;
    var dy = 200;
    draw_set_halign(fa_right);
    draw_set_alpha(0.7);
    draw_set_color(c_dkgray);
    draw_rectangle(dx,dy,dx-200,dy+300,0);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_text(dx,dy,"Lat: "+string(data[use_data_point,1]));dy+=23;
    draw_text(dx,dy,"Lon: "+string(data[use_data_point,2]));dy+=23;
    
    draw_set_halign(fa_left);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
